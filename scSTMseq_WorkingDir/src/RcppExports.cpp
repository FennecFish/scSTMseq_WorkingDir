// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lhoodcpp
double lhoodcpp(SEXP eta, SEXP beta, SEXP doc_ct, SEXP mu, SEXP siginv);
RcppExport SEXP _stm_lhoodcpp(SEXP etaSEXP, SEXP betaSEXP, SEXP doc_ctSEXP, SEXP muSEXP, SEXP siginvSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type doc_ct(doc_ctSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu(muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type siginv(siginvSEXP);
    rcpp_result_gen = Rcpp::wrap(lhoodcpp(eta, beta, doc_ct, mu, siginv));
    return rcpp_result_gen;
    END_RCPP
}
// gradcpp
arma::vec gradcpp(SEXP eta, SEXP beta, SEXP doc_ct, SEXP mu, SEXP siginv);
RcppExport SEXP _stm_gradcpp(SEXP etaSEXP, SEXP betaSEXP, SEXP doc_ctSEXP, SEXP muSEXP, SEXP siginvSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type doc_ct(doc_ctSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu(muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type siginv(siginvSEXP);
    rcpp_result_gen = Rcpp::wrap(gradcpp(eta, beta, doc_ct, mu, siginv));
    return rcpp_result_gen;
    END_RCPP
}

// multilhoodcpp
double multilhoodcpp(SEXP eta, SEXP beta, SEXP doc_ct, SEXP mu, SEXP pi, SEXP siginv);
RcppExport SEXP _stm_multilhoodcpp(SEXP etaSEXP, SEXP betaSEXP, SEXP doc_ctSEXP, SEXP muSEXP, SEXP piSEXP, SEXP siginvSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type doc_ct(doc_ctSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu(muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pi(piSEXP);
    Rcpp::traits::input_parameter< SEXP >::type siginv(siginvSEXP);
    rcpp_result_gen = Rcpp::wrap(multilhoodcpp(eta, beta, doc_ct, mu, pi, siginv));
    return rcpp_result_gen;
    END_RCPP
}
// multigradcpp
arma::vec multigradcpp(SEXP eta, SEXP beta, SEXP doc_ct, SEXP mu, SEXP pi, SEXP siginv);
RcppExport SEXP _stm_multigradcpp(SEXP etaSEXP, SEXP betaSEXP, SEXP doc_ctSEXP, 
                             SEXP muSEXP, SEXP piSEXP, SEXP siginvSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type doc_ct(doc_ctSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu(muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pi(piSEXP);
    Rcpp::traits::input_parameter< SEXP >::type siginv(siginvSEXP);
    rcpp_result_gen = Rcpp::wrap(multigradcpp(eta, beta, doc_ct, mu, pi, siginv));
    return rcpp_result_gen;
    END_RCPP
}
// multihpbcpp
SEXP multihpbcpp(SEXP eta, SEXP beta, SEXP doc_ct, SEXP mu, SEXP siginv, SEXP sigmaentropy,
                 SEXP sigs, SEXP sigsentropy, SEXP omegaentropy,
                 SEXP sigs_inv, SEXP omega);
RcppExport SEXP _stm_multihpbcpp(SEXP etaSEXP, SEXP betaSEXP, SEXP doc_ctSEXP, 
                            SEXP muSEXP, SEXP siginvSEXP, SEXP sigmaentropySEXP,
                            SEXP sigsSEXP, SEXP sigsentropySEXP, SEXP omegaentropySEXP,
                            SEXP sigs_invSEXP, SEXP omegaSEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type doc_ct(doc_ctSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu(muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type siginv(siginvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigmaentropy(sigmaentropySEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigs(sigsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigsentropy(sigsentropySEXP);
    Rcpp::traits::input_parameter< SEXP >::type omegaentropy(omegaentropySEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigs_inv(sigs_invSEXP);
    Rcpp::traits::input_parameter< SEXP >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(multihpbcpp(eta, beta, doc_ct, mu, siginv, sigmaentropy,
                                        sigs, sigsentropy, omegaentropy,
                                        sigs_inv, omega));
    return rcpp_result_gen;
    END_RCPP
}
// singlehpbcpp
SEXP singlehpbcpp(SEXP eta, SEXP beta, SEXP doc_ct, SEXP mu, SEXP siginv, SEXP sigmaentropy);
RcppExport SEXP _stm_singlehpbcpp(SEXP etaSEXP, SEXP betaSEXP, SEXP doc_ctSEXP, SEXP muSEXP, SEXP siginvSEXP, SEXP sigmaentropySEXP) {
    BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type doc_ct(doc_ctSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mu(muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type siginv(siginvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigmaentropy(sigmaentropySEXP);
    rcpp_result_gen = Rcpp::wrap(singlehpbcpp(eta, beta, doc_ct, mu, siginv, sigmaentropy));
    return rcpp_result_gen;
    END_RCPP
}
static const R_CallMethodDef CallEntries[] = {
    {"_stm_lhoodcpp", (DL_FUNC) &_stm_lhoodcpp, 5},
    {"_stm_gradcpp", (DL_FUNC) &_stm_gradcpp, 5},
    {"_stm_multilhoodcpp", (DL_FUNC) &_stm_multilhoodcpp, 6},
    {"_stm_multigradcpp", (DL_FUNC) &_stm_multigradcpp, 6},
    {"_stm_multihpbcpp", (DL_FUNC) &_stm_multihpbcpp, 11},
    {"_stm_singlehpbcpp", (DL_FUNC) &_stm_singlehpbcpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_stm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
